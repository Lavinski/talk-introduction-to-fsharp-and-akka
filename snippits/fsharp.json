{
	"Create Serilog Config": {
		"prefix": "talk",
		"body": [
			"Serilog.LoggerConfiguration()$0",
			"    .CreateLogger()"
		],
		"description": "Create a Serilog Logger from empty config"
	},
	"Create Custom Console Sink": {
		"prefix": "talk",
		"body": [
			"",
			"    .WriteTo.Sink({ new Core.ILogEventSink with",
			"        member this.Emit(logEvent) =",
			"            Console.WriteLine(logEvent.RenderMessage())",
			"    })"
		],
		"description": "Create Custom Console Sink"
	},
	"Create Functions For Error Logging": {
		"prefix": "talk",
		"body": [
			"    let logError (logger:ILogger) message =",
			"        logger.Error(message)",
			"",
			"    let logErrorFormat (logger:ILogger) message (arguments:seq<obj>) =",
			"        logger.Error(message, arguments |> Seq.toArray)",
			"",
			"    let logErrorExn (exn:exn) (logger:ILogger) message =",
			"        logger.Error(exn, message)",
			"",
			"    let logErrorExnFormat exn (logger:ILogger) message (arguments:seq<obj>) =",
			"        logger.Error(exn, message, arguments |> Seq.toArray)"
		],
		"description": "Create Functions For Error Logging"
	},
	"Script Include #r Serilog": {
		"prefix": "talk",
		"body": [
			"#r @\"..\\..\\packages\\Serilog\\lib\\net45\\Serilog.dll\""
		],
		"description": "Script Include #r Serilog"
	},
	"Create Schedule Function": {
		"prefix": "talk",
		"body": [
			"let schedule (system: ActorSystem) actor message =\r",
			"    system\r",
			"        .Scheduler\r",
			"        .ScheduleTellRepeatedly(TimeSpan.FromSeconds(0.0), TimeSpan.FromSeconds(5.0), actor, message);"
		],
		"description": "Creates a function to schedule messages for actors"
	},
	"Create Actor": {
		"prefix": "talk",
		"body": [
			"let ${1:actorFunc} log =",
			"    let log = logWith log \"ActorName\" \"${1:actorName}\"",
			"    (fun mailbox ->",
			"        let rec loop() = actor {",
			"            let! message = mailbox.Receive()",
			"            return! loop()",
			"        }",
			"        loop())"
		],
		"description": "Create empty actor"
	},
	"Create Log With Function": {
		"prefix": "talk",
		"body": [
			"let logWith (log: ILogger) (propertyName:string) (value:obj) =\r",
			"    log.ForContext(propertyName, value)"
		],
		"description": "Creates new logger with extra property on all messages"
	},
	"Create Seq Logger Serilog": {
		"prefix": "talk",
		"body": [
			"LoggerConfiguration()\r",
			"    .WriteTo.Seq(\"http://localhost:5341\")\r",
			"    .CreateLogger()"
		],
		"description": "Create Seq Logger"
	},
	"Create Actor System": {
		"prefix": "talk",
		"body": [
			"use system = System.create \"my-system\" (Configuration.load())"
		],
		"description": "Create actor system"
	},
	"Wait for system shutdown or terminated": {
		"prefix": "talk",
		"body": [
			"system.WhenTerminated\r",
			"    |> Async.AwaitTask\r",
			"    |> Async.RunSynchronously"
		],
		"description": "Wait for system shutdown"
	},
	"Add Supervisor Stategy": {
		"prefix": "talk",
		"body": [
			"[\r",
			"    SpawnOption.SupervisorStrategy (Strategy.OneForOne (fun error -> Directive.Restart))\r",
			"]"
		],
		"description": "Add supervisor Strategy"
	},
	"Create notification manager": {
		"prefix": "talk",
		"body": [
			"let notifier = WindowsNotifications.NotificationManager(\"TwitterAlerts\")"
		],
		"description": "Create Notification Manger"
	},
	"Create Twitter Client": {
		"prefix": "talk",
		"body": [
			"let twitter = Twitter.AuthenticateAppOnly(creds.Key, creds.Secret)"
		],
		"description": "Create Twitter Client"
	},
	"Terminate Actor System": {
		"prefix": "talk",
		"body": [
			"mailbox.Context.System.Terminate() |> ignore"
		],
		"description": "Terminate Actor System"
	},
	"Add open": {
		"prefix": "talk",
		"body": [
			"open Akka\r",
			"open Akka.Actor\r",
			"open Akka.FSharp\r",
			"open System\r",
			"open Serilog\r",
			"open LoggingHelpers\r",
			"open FSharp.Data.Toolbox.Twitter"
		],
		"description": "Add open statements for twitter app"
	},
	"Twitter Creds": {
		"prefix": "talk",
		"body": [
			"type TwitterCreds = \r",
			"    {\r",
			"        Key: string;\r",
			"        Secret: string;\r",
			"    }\r",
			"\r",
			"let loadKeys () =\r",
			"    let lines = System.IO.File.ReadLines(@\"C:\\\\Projects\\\\twitterCreds.txt\") |> Seq.toArray\r",
			"    {\r",
			"        Key = lines.[0].Trim();\r",
			"        Secret = lines.[1].Trim();\r",
			"    }"
		],
		"description": "Twitter Creds"
	}
}