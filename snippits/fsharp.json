{
	"Create Serilog Config": {
		"prefix": "talk",
		"body": [
			"Serilog.LoggerConfiguration()$0",
			"    .CreateLogger()"
		],
		"description": "Create a Serilog Logger from empty config"
	},
	"Create Custom Console Sink": {
		"prefix": "talk",
		"body": [
			"",
			"    .WriteTo.Sink({ new Core.ILogEventSink with",
			"        member this.Emit(logEvent) =",
			"            Console.WriteLine(logEvent.RenderMessage())",
			"    })"
		],
		"description": "Create Custom Console Sink"
	},
	"Create Functions For Error Logging": {
		"prefix": "talk",
		"body": [
			"    let logError (logger:ILogger) message =",
			"        logger.Error(message)",
			"",
			"    let logErrorFormat (logger:ILogger) message (arguments:seq<obj>) =",
			"        logger.Error(message, arguments |> Seq.toArray)",
			"",
			"    let logErrorExn (exn:exn) (logger:ILogger) message =",
			"        logger.Error(exn, message)",
			"",
			"    let logErrorExnFormat exn (logger:ILogger) message (arguments:seq<obj>) =",
			"        logger.Error(exn, message, arguments |> Seq.toArray)"
		],
		"description": "Create Functions For Error Logging"
	},
	"Script Include #r Serilog": {
		"prefix": "talk",
		"body": [
			"..\\..\\packages\\Serilog\\lib\\net45\\Serilog.dll"
		],
		"description": "Script Include #r Serilog"
	},
	"Create Load Keys Function": {
		"prefix": "talk",
		"body": [
			"let loadKeys () =",
			"    let lines = System.IO.File.ReadLines(\"C:\\Projects\\twitterCreds.txt\") |> Seq.toArray",
			"    {",
			"        Key = lines.[0].Trim();",
			"        Secret = lines.[1].Trim();",
			"    }"
		],
		"description": "Script Include #r Serilog"
	},
	"Create Schedule Function": {
		"prefix": "talk",
		"body": [
			"    let schedule (system: ActorSystem) actor message =\r",
			"        system\r",
			"            .Scheduler\r",
			"            .ScheduleTellRepeatedly(TimeSpan.FromSeconds(0.0), TimeSpan.FromSeconds(5.0), actor, message);"
		],
		"description": "Creates a function to schedule messages for actors"
	},
	"Create Actor": {
		"prefix": "talk",
		"body": [
			"let ${1:actorFunc} log =",
			"    let log = logWith log \"ActorName\" \"${1:actorName}\"",
			"    (fun mailbox ->",
			"        let rec loop() = actor {",
			"            let! message = mailbox.Receive()",
			"            return! loop()",
			"        }",
			"        loop())"
		],
		"description": "Create empty actor"
	},
	"Create Log With Function": {
		"prefix": "talk",
		"body": [
			"    let logWith (log: ILogger) (propertyName:string) (value:obj) =\r",
			"        log.ForContext(propertyName, value)"
		],
		"description": "Creates new logger with extra property on all messages"
	},
	"Create Seq Logger": {
		"prefix": "talk",
		"body": [
			"LoggerConfiguration()\r",
			"                .WriteTo.Seq(\"http://localhost:5341\")\r",
			"                .CreateLogger()"
		],
		"description": "Create Seq Logger"
	},
	"Create Actor System": {
		"prefix": "talk",
		"body": [
			"use system = System.create \"my-system\" (Configuration.load())"
		],
		"description": "Create actor system"
	},
	"Wait for system shutdown": {
		"prefix": "talk",
		"body": [
			"        system.WhenTerminated\r",
			"            |> Async.AwaitTask\r",
			"            |> Async.RunSynchronously"
		],
		"description": "Wait for system shutdown"
	},
	"Add Supervisor Stategy": {
		"prefix": "talk",
		"body": [
			"            [\r",
			"                SpawnOption.SupervisorStrategy (Strategy.OneForOne (fun error -> Directive.Restart))\r",
			"            ]"
		],
		"description": "Add supervisor Strategy"
	},
	"Create notification manager": {
		"prefix": "talk",
		"body": [
			"let notifier = WindowsNotifications.NotificationManager(\"TwitterAlerts\")"
		],
		"description": "Create Notification Manger"
	},
	"Create Twitter Client": {
		"prefix": "talk",
		"body": [
			"let twitter = Twitter.AuthenticateAppOnly(creds.Key, creds.Secret)"
		],
		"description": "Create Twitter Client"
	},
	"Terminate Actor System": {
		"prefix": "talk",
		"body": [
			"mailbox.Context.System.Terminate() |> ignore"
		],
		"description": "Terminate Actor System"
	},
	"Add FAKE openings": {
		"prefix": "talk-fake",
		"body": [
			"#r \"./packages/build/FAKE/tools/FakeLib.dll\"\r",
			"\r",
			"open Fake\r",
			"open Fake.FileUtils\r",
			"open Fake.EnvironmentHelper\r",
			"open Fake.AssemblyInfoFile\r",
			"open System"
		],
		"description": "Add FAKE open-ings"
	},
	"Get version from Paket Template": {
		"prefix": "talk-fake",
		"body": [
			"StringHelper.ReadFile templatePath\r",
			"    |> Seq.where (fun line -> line.StartsWith(\"Version\"))\r",
			"    |> Seq.map (fun line -> line.Replace(\"Version\", \"\").Trim())\r",
			"    |> Seq.exactlyOne"
		],
		"description": "Get version from Paket Template"
	},
	"Get project info": {
		"prefix": "talk-fake",
		"body": [
			"projectsToPackage\r",
			"    |> Seq.map (fun templatePath -> \r",
			"        let dir = (directoryInfo templatePath).Parent\r",
			"        let projFile = filesInDirMatching \"*.*proj\" dir |> Seq.exactlyOne\r",
			"        {\r",
			"            Name = projFile.Name;\r",
			"            Directory = dir;\r",
			"            Version = getVersionFromTemplate templatePath;\r",
			"            TemplatePath = templatePath\r",
			"        })"
		],
		"description": "Get project info"
	},
	"Create FSharp Assembly Info": {
		"prefix": "talk-fake",
		"body": [
			"CreateFSharpAssemblyInfo (project.Directory.FullName @@ \"AssemblyVersionInfo.fs\")\r",
			"            [\r",
			"                Attribute.Version project.Version;\r",
			"                Attribute.FileVersion project.Version\r",
			"            ]"
		],
		"description": "Create FSharp Assembly Info"
	},
	"Paket Pack": {
		"prefix": "talk-fake",
		"body": [
			"Paket.Pack (fun p -> \r",
			"            { p with\r",
			"                BuildConfig = buildConfig;\r",
			"                Version = project.Version;\r",
			"                TemplateFile = project.TemplatePath;\r",
			"                WorkingDir = artifacts;\r",
			"                OutputPath = \".\";\r",
			"                IncludeReferencedProjects = true;\r",
			"                BuildPlatform = \"AnyCPU\"\r",
			"            }\r",
			"        )"
		],
		"description": "Paket Pack"
	},
	"undefined": {
		"body": [
			"for executable in executables do\r",
			"        logfn \"Running: %s\" executable\r",
			"        System.Diagnostics.Process.Start(executable, \"\") |> ignore"
		]
	},
	"Run executables": {
		"prefix": "talk-fake",
		"body": [
			"    for executable in executables do\r",
			"        logfn \"Running: %s\" executable\r",
			"        System.Diagnostics.Process.Start(executable, \"\") |> ignore"
		],
		"description": "Run executables"
	},
	"Build Order": {
		"prefix": "talk-fake",
		"body": [
			"// Build order\r",
			"\"Clean\"   ?=> \"Build\"\r",
			"\"Version\" ?=> \"Build\"\r",
			"\"Test\"    <== [ \"Build\" ]\r",
			"\"Package\" <== [ \"Version\"; \"Build\"; ]\r",
			"\"Run\" <== [ \"Version\"; \"Build\"; \"Test\" ]\r",
			"\r",
			"RunTargetOrDefault \"Build\""
		],
		"description": "Build Order"
	},
	"MSBuild": {
		"prefix": "talk-fake",
		"body": [
			"MSBuild null \"Build\" [\"Configuration\", buildConfig] appReferences |> Log \"AppBuild-Output: \""
		],
		"description": "MSBuild"
	}
}